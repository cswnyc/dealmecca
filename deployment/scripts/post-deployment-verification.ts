#!/usr/bin/env npx tsx

/**
 * STEP 5: Production Deployment Preparation
 * Post-Deployment Verification Script
 * 
 * Comprehensive verification of production deployment
 */

import { performance } from 'perf_hooks';

interface VerificationTest {
  name: string;
  category: string;
  success: boolean;
  duration: number;
  statusCode?: number;
  errorMessage?: string;
  responseSize?: number;
  details?: string;
}

interface VerificationResult {
  totalTests: number;
  passedTests: number;
  failedTests: number;
  categories: { [key: string]: VerificationTest[] };
  overallSuccess: boolean;
  deploymentScore: number;
}

class PostDeploymentVerifier {
  private tests: VerificationTest[] = [];
  private baseUrl: string;

  constructor(baseUrl: string = 'https://your-domain.com') {
    this.baseUrl = baseUrl;
  }

  async runTest(
    name: string, 
    category: string, 
    testFunction: () => Promise<any>
  ): Promise<boolean> {
    const startTime = performance.now();
    try {
      console.log(`üîµ Testing ${category}: ${name}...`);
      const result = await testFunction();
      const duration = performance.now() - startTime;
      
      this.tests.push({
        name,
        category,
        success: true,
        duration,
        statusCode: result?.status || 200,
        responseSize: JSON.stringify(result || {}).length,
        details: result?.details
      });
      
      console.log(`‚úÖ ${name} completed in ${duration.toFixed(2)}ms`);
      return true;
    } catch (error: any) {
      const duration = performance.now() - startTime;
      this.tests.push({
        name,
        category,
        success: false,
        duration,
        errorMessage: error.message,
        statusCode: error.status || 500
      });
      
      console.log(`‚ùå ${name} failed: ${error.message}`);
      return false;
    }
  }

  // =============================================================================
  // BASIC CONNECTIVITY TESTS
  // =============================================================================
  async testBasicConnectivity(): Promise<void> {
    console.log('\nüåê Testing Basic Connectivity...');

    await this.runTest('Homepage Load', 'Connectivity', async () => {
      const response = await fetch(this.baseUrl);
      if (!response.ok) throw new Error(`HTTP ${response.status}`);
      const html = await response.text();
      if (html.length < 1000) throw new Error('Homepage content too small');
      return { status: response.status, size: html.length };
    });

    await this.runTest('HTTPS Redirect', 'Connectivity', async () => {
      const httpUrl = this.baseUrl.replace('https://', 'http://');
      const response = await fetch(httpUrl, { redirect: 'manual' });
      if (![301, 302, 308].includes(response.status)) {
        throw new Error('HTTPS redirect not working');
      }
      return { status: response.status, location: response.headers.get('location') };
    });

    await this.runTest('Health Check Endpoint', 'Connectivity', async () => {
      const response = await fetch(`${this.baseUrl}/api/health`);
      if (!response.ok) throw new Error(`Health check failed: ${response.status}`);
      const data = await response.json();
      if (data.status !== 'healthy') throw new Error('Health check returned unhealthy');
      return { status: response.status, data };
    });
  }

  // =============================================================================
  // SSL & SECURITY TESTS
  // =============================================================================
  async testSSLSecurity(): Promise<void> {
    console.log('\nüîí Testing SSL & Security...');

    await this.runTest('SSL Certificate Validity', 'Security', async () => {
      const response = await fetch(this.baseUrl);
      if (!response.ok) throw new Error(`HTTPS request failed: ${response.status}`);
      return { status: response.status, secure: true };
    });

    await this.runTest('Security Headers', 'Security', async () => {
      const response = await fetch(this.baseUrl);
      const headers = response.headers;
      
      const requiredHeaders = [
        'x-frame-options',
        'x-content-type-options',
        'x-xss-protection'
      ];
      
      const missingHeaders = requiredHeaders.filter(header => !headers.get(header));
      if (missingHeaders.length > 0) {
        throw new Error(`Missing security headers: ${missingHeaders.join(', ')}`);
      }
      
      return { 
        status: response.status, 
        headers: Object.fromEntries(headers.entries()) 
      };
    });

    await this.runTest('HSTS Header', 'Security', async () => {
      const response = await fetch(this.baseUrl);
      const hstsHeader = response.headers.get('strict-transport-security');
      if (!hstsHeader) {
        throw new Error('HSTS header not present');
      }
      return { status: response.status, hsts: hstsHeader };
    });
  }

  // =============================================================================
  // API ENDPOINT TESTS
  // =============================================================================
  async testAPIEndpoints(): Promise<void> {
    console.log('\nüîå Testing API Endpoints...');

    await this.runTest('API Health Check', 'API', async () => {
      const response = await fetch(`${this.baseUrl}/api/health`);
      if (!response.ok) throw new Error(`API health check failed: ${response.status}`);
      return { status: response.status };
    });

    await this.runTest('Authentication Endpoint', 'API', async () => {
      const response = await fetch(`${this.baseUrl}/api/auth/signin`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ email: 'test@example.com', password: 'invalid' })
      });
      // Should return 400 or 401 for invalid credentials
      if (![400, 401, 422].includes(response.status)) {
        throw new Error(`Unexpected auth response: ${response.status}`);
      }
      return { status: response.status };
    });

    await this.runTest('Protected API Route', 'API', async () => {
      const response = await fetch(`${this.baseUrl}/api/orgs/companies`);
      // Should return 401 for unauthenticated request
      if (response.status !== 401) {
        throw new Error(`Protected route not secured: ${response.status}`);
      }
      return { status: response.status };
    });
  }

  // =============================================================================
  // DATABASE TESTS
  // =============================================================================
  async testDatabase(): Promise<void> {
    console.log('\nüóÑÔ∏è Testing Database...');

    await this.runTest('Database Health', 'Database', async () => {
      const response = await fetch(`${this.baseUrl}/api/health?check=db`);
      if (!response.ok) throw new Error(`Database health check failed: ${response.status}`);
      const data = await response.json();
      if (!data.database?.healthy) throw new Error('Database not healthy');
      return { status: response.status, dbStatus: data.database };
    });

    await this.runTest('Database Connection Pool', 'Database', async () => {
      // Test multiple concurrent connections
      const promises = Array(5).fill(null).map(() => 
        fetch(`${this.baseUrl}/api/health?check=db`)
      );
      const responses = await Promise.all(promises);
      const allOk = responses.every(r => r.ok);
      if (!allOk) throw new Error('Database connection pool issues');
      return { status: 200, concurrentConnections: 5 };
    });
  }

  // =============================================================================
  // PERFORMANCE TESTS
  // =============================================================================
  async testPerformance(): Promise<void> {
    console.log('\n‚ö° Testing Performance...');

    await this.runTest('Page Load Performance', 'Performance', async () => {
      const startTime = Date.now();
      const response = await fetch(this.baseUrl);
      const loadTime = Date.now() - startTime;
      
      if (!response.ok) throw new Error(`Page load failed: ${response.status}`);
      if (loadTime > 5000) throw new Error(`Page load too slow: ${loadTime}ms`);
      
      return { status: response.status, loadTime, details: `${loadTime}ms` };
    });

    await this.runTest('API Response Time', 'Performance', async () => {
      const startTime = Date.now();
      const response = await fetch(`${this.baseUrl}/api/health`);
      const responseTime = Date.now() - startTime;
      
      if (!response.ok) throw new Error(`API request failed: ${response.status}`);
      if (responseTime > 2000) throw new Error(`API too slow: ${responseTime}ms`);
      
      return { status: response.status, responseTime, details: `${responseTime}ms` };
    });

    await this.runTest('Static Asset Loading', 'Performance', async () => {
      const response = await fetch(`${this.baseUrl}/_next/static/chunks/main.js`);
      // May not exist, but should not be 500
      if (response.status >= 500) {
        throw new Error(`Static asset server error: ${response.status}`);
      }
      return { status: response.status };
    });
  }

  // =============================================================================
  // FUNCTIONALITY TESTS
  // =============================================================================
  async testCoreFunctionality(): Promise<void> {
    console.log('\nüéØ Testing Core Functionality...');

    await this.runTest('Registration Page', 'Functionality', async () => {
      const response = await fetch(`${this.baseUrl}/auth/signup`);
      if (!response.ok) throw new Error(`Registration page failed: ${response.status}`);
      const html = await response.text();
      if (!html.includes('sign up') && !html.includes('register')) {
        throw new Error('Registration page content invalid');
      }
      return { status: response.status };
    });

    await this.runTest('Login Page', 'Functionality', async () => {
      const response = await fetch(`${this.baseUrl}/auth/signin`);
      if (!response.ok) throw new Error(`Login page failed: ${response.status}`);
      const html = await response.text();
      if (!html.includes('sign in') && !html.includes('login')) {
        throw new Error('Login page content invalid');
      }
      return { status: response.status };
    });

    await this.runTest('Admin Panel Access', 'Functionality', async () => {
      const response = await fetch(`${this.baseUrl}/admin`);
      // Should redirect to login for unauthenticated users
      if (![200, 302, 401].includes(response.status)) {
        throw new Error(`Admin panel unexpected response: ${response.status}`);
      }
      return { status: response.status };
    });
  }

  // =============================================================================
  // MOBILE RESPONSIVENESS TESTS
  // =============================================================================
  async testMobileResponsiveness(): Promise<void> {
    console.log('\nüì± Testing Mobile Responsiveness...');

    const mobileUserAgent = 'Mozilla/5.0 (iPhone; CPU iPhone OS 15_0 like Mac OS X) AppleWebKit/605.1.15';

    await this.runTest('Mobile Homepage', 'Mobile', async () => {
      const response = await fetch(this.baseUrl, {
        headers: { 'User-Agent': mobileUserAgent }
      });
      if (!response.ok) throw new Error(`Mobile homepage failed: ${response.status}`);
      const html = await response.text();
      if (!html.includes('viewport') || !html.includes('width=device-width')) {
        throw new Error('Mobile viewport not configured');
      }
      return { status: response.status, mobile: true };
    });

    await this.runTest('Mobile Navigation', 'Mobile', async () => {
      const response = await fetch(this.baseUrl, {
        headers: { 'User-Agent': mobileUserAgent }
      });
      if (!response.ok) throw new Error(`Mobile navigation failed: ${response.status}`);
      return { status: response.status };
    });
  }

  // =============================================================================
  // MAIN EXECUTION
  // =============================================================================
  async runAllVerifications(): Promise<VerificationResult> {
    console.log('\nüöÄ PRODUCTION DEPLOYMENT VERIFICATION');
    console.log('====================================');
    console.log(`üìÖ Verification Date: ${new Date().toLocaleString()}`);
    console.log(`üéØ Target URL: ${this.baseUrl}`);
    console.log('üîç Running comprehensive verification tests...\n');

    // Run all test categories
    await this.testBasicConnectivity();
    await this.testSSLSecurity();
    await this.testAPIEndpoints();
    await this.testDatabase();
    await this.testPerformance();
    await this.testCoreFunctionality();
    await this.testMobileResponsiveness();

    // Analyze results
    const totalTests = this.tests.length;
    const passedTests = this.tests.filter(t => t.success).length;
    const failedTests = totalTests - passedTests;
    const overallSuccess = (passedTests / totalTests) >= 0.85; // 85% pass rate
    const deploymentScore = Math.round((passedTests / totalTests) * 100);

    // Group by category
    const categories: { [key: string]: VerificationTest[] } = {};
    this.tests.forEach(test => {
      if (!categories[test.category]) categories[test.category] = [];
      categories[test.category].push(test);
    });

    return {
      totalTests,
      passedTests,
      failedTests,
      categories,
      overallSuccess,
      deploymentScore
    };
  }

  generateReport(result: VerificationResult): string {
    const avgTestTime = this.tests.reduce((sum, test) => sum + test.duration, 0) / this.tests.length;
    const failedTests = this.tests.filter(t => !t.success);

    return `
üéØ PRODUCTION DEPLOYMENT VERIFICATION REPORT
============================================
üìÖ Verification Date: ${new Date().toLocaleString()}
üåê Target URL: ${this.baseUrl}
üìä Deployment Score: ${result.deploymentScore}%
üéØ Overall Status: ${result.overallSuccess ? '‚úÖ PRODUCTION READY' : '‚ùå ISSUES DETECTED'}

üìä VERIFICATION SUMMARY:
=======================
‚úÖ Total Tests: ${result.totalTests}
‚úÖ Passed: ${result.passedTests}
‚ùå Failed: ${result.failedTests}
‚ö° Average Test Time: ${avgTestTime.toFixed(2)}ms

üìã CATEGORY BREAKDOWN:
=====================
${Object.entries(result.categories).map(([category, tests]) => {
  const passed = tests.filter(t => t.success).length;
  const total = tests.length;
  const percentage = Math.round((passed / total) * 100);
  return `${category}: ${passed}/${total} (${percentage}%) ${percentage >= 85 ? '‚úÖ' : '‚ùå'}`;
}).join('\n')}

üìã DETAILED TEST RESULTS:
=========================
${this.tests.map((test, index) => 
`${index + 1}. [${test.category}] ${test.name}
   Status: ${test.success ? '‚úÖ PASS' : '‚ùå FAIL'}
   Duration: ${test.duration.toFixed(2)}ms
   ${test.statusCode ? `HTTP: ${test.statusCode}` : ''}
   ${test.details ? `Details: ${test.details}` : ''}
   ${test.errorMessage ? `Error: ${test.errorMessage}` : ''}
`).join('\n')}

${failedTests.length > 0 ? `
‚ùå FAILED TESTS ANALYSIS:
========================
${failedTests.map(test => 
`‚Ä¢ [${test.category}] ${test.name}: ${test.errorMessage || 'Unknown error'}`
).join('\n')}

üîß REQUIRED FIXES:
==================
${failedTests.map(test => {
  if (test.category === 'Connectivity') return '‚Ä¢ Fix network connectivity or DNS issues';
  if (test.category === 'Security') return '‚Ä¢ Configure security headers and SSL properly';
  if (test.category === 'API') return '‚Ä¢ Check API endpoints and authentication';
  if (test.category === 'Database') return '‚Ä¢ Verify database connectivity and health';
  if (test.category === 'Performance') return '‚Ä¢ Optimize application performance';
  if (test.category === 'Functionality') return '‚Ä¢ Fix application functionality issues';
  if (test.category === 'Mobile') return '‚Ä¢ Improve mobile responsiveness';
  return '‚Ä¢ Review and fix identified issues';
}).filter((fix, index, arr) => arr.indexOf(fix) === index).join('\n')}
` : 'üéâ ALL TESTS PASSED!'}

üéØ PRODUCTION READINESS ASSESSMENT:
==================================
Basic Connectivity: ${result.categories['Connectivity']?.every(t => t.success) ? '‚úÖ' : '‚ùå'}
Security Configuration: ${result.categories['Security']?.every(t => t.success) ? '‚úÖ' : '‚ùå'}
API Functionality: ${result.categories['API']?.every(t => t.success) ? '‚úÖ' : '‚ùå'}
Database Health: ${result.categories['Database']?.every(t => t.success) ? '‚úÖ' : '‚ùå'}
Performance Standards: ${result.categories['Performance']?.every(t => t.success) ? '‚úÖ' : '‚ùå'}
Core Features: ${result.categories['Functionality']?.every(t => t.success) ? '‚úÖ' : '‚ùå'}
Mobile Experience: ${result.categories['Mobile']?.every(t => t.success) ? '‚úÖ' : '‚ùå'}

üèÜ DEPLOYMENT GRADE:
===================
${result.deploymentScore >= 95 ? 'üü¢ A+ (95-100%) - EXCELLENT' :
  result.deploymentScore >= 90 ? 'üü¢ A (90-94%) - VERY GOOD' :
  result.deploymentScore >= 85 ? 'üü° B (85-89%) - GOOD' :
  result.deploymentScore >= 70 ? 'üü† C (70-84%) - ACCEPTABLE' :
  'üî¥ D (<70%) - NEEDS WORK'}

üí° RECOMMENDATIONS:
==================
${result.deploymentScore >= 95 ? 
`üéâ Deployment verification successful!
‚úÖ All systems operational
‚úÖ Ready for production traffic
‚úÖ Monitor performance and user feedback` :
result.deploymentScore >= 85 ?
`‚úÖ Deployment generally successful with minor issues
üîß Address failed tests for optimal performance
üìä Monitor system health closely
üîÑ Plan fixes for next maintenance window` :
`üö® Deployment has significant issues
üîß Address failed tests before directing traffic
üìû Consider rollback if critical issues persist
üîÑ Re-run verification after fixes`}

üîÑ NEXT STEPS:
=============
${result.overallSuccess ?
`1. ‚úÖ Deployment verified and ready
2. üìä Begin monitoring production metrics
3. üìù Document any minor issues for future fixes
4. üöÄ Announce successful deployment to stakeholders` :
`1. üîß Fix all failed verification tests
2. üîÑ Re-run verification script
3. üìû Consider rollback if issues persist
4. üìã Update deployment procedures based on findings`}

============================================
`;
  }
}

async function main() {
  // Get target URL from command line argument or environment
  const targetUrl = process.argv[2] || process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3002';
  
  const verifier = new PostDeploymentVerifier(targetUrl);
  
  try {
    const result = await verifier.runAllVerifications();
    const report = verifier.generateReport(result);
    
    console.log(report);
    
    // Save report to file
    const fs = await import('fs/promises');
    await fs.writeFile(
      'post-deployment-verification-report.txt', 
      report, 
      'utf8'
    );
    
    console.log('\nüìÑ Report saved to: post-deployment-verification-report.txt');
    
    // Exit with appropriate code
    process.exit(result.overallSuccess ? 0 : 1);
    
  } catch (error: any) {
    console.error('\nüí• Fatal error during verification:', error.message);
    process.exit(1);
  }
}

if (require.main === module) {
  main();
} 