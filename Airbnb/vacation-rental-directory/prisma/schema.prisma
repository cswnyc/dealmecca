generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

/// ===== Enums =====
enum Role { 
  GUEST 
  OWNER 
  ADMIN 
}

enum Tier { 
  BRONZE 
  SILVER 
  GOLD 
  PLATINUM 
}

enum ListingStatus { 
  DRAFT 
  PENDING 
  ACTIVE 
  SUSPENDED 
}

enum AvailabilityStatus { 
  AVAILABLE 
  BOOKED 
  BLOCKED 
}

enum InquiryStatus { 
  PENDING 
  RESPONDED 
  ARCHIVED 
}

/// ===== Core Users/Owners =====
model User {
  id           String        @id @default(cuid())
  email        String        @unique
  emailVerified DateTime?
  name         String?
  image        String?
  password     String?
  role         Role          @default(GUEST)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  accounts     Account[]
  sessions     Session[]
  ownerProfile OwnerProfile?
  inquiries    Inquiry[]
  reviews      Review[]

  @@map("users")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verification_tokens")
}

model OwnerProfile {
  id               String        @id @default(cuid())
  userId           String        @unique
  businessName     String?
  phone            String?
  website          String?
  bio              String?
  verified         Boolean       @default(false)
  stripeCustomerId String?       @unique
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  user       User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  listings   Listing[]
  subs       Subscription[]

  @@map("owner_profiles")
}

/// ===== Taxonomy =====
model City {
  id        String   @id @default(cuid())
  name      String
  state     String
  country   String   @default("US")
  slug      String   @unique
  latitude  Float?
  longitude Float?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  neighborhoods Neighborhood[]
  listings      Listing[]

  @@index([slug])
  @@map("cities")
}

model Neighborhood {
  id          String   @id @default(cuid())
  cityId      String
  name        String
  slug        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  city     City      @relation(fields: [cityId], references: [id], onDelete: Cascade)
  listings Listing[]

  @@unique([cityId, slug])
  @@index([slug])
  @@map("neighborhoods")
}

model Amenity {
  id          String @id @default(cuid())
  key         String @unique
  name        String
  description String?
  icon        String?
  category    String @default("general")
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  listings AmenityOnListing[]
  
  @@map("amenities")
}

/// ===== Listings & Media =====
model Listing {
  id              String        @id @default(cuid())
  ownerId         String
  cityId          String
  neighborhoodId  String?
  title           String
  slug            String        @unique
  summary         String?
  description     String?
  propertyType    String        @default("house")
  bedrooms        Int
  bathrooms       Float
  sleeps          Int?
  maxGuests       Int?
  priceMin        Int?          // dollars
  priceMax        Int?          // dollars
  basePrice       Int?          // cents
  cleaningFee     Int?          // cents
  securityDeposit Int?          // cents
  tier            Tier?
  status          ListingStatus @default(DRAFT)
  featured        Boolean       @default(false)
  
  // SEO
  metaTitle       String?
  metaDescription String?
  
  // Calendar sync
  icalUrl         String?
  icalSyncedAt    DateTime?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner        OwnerProfile     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  city         City             @relation(fields: [cityId], references: [id], onDelete: Cascade)
  neighborhood Neighborhood?    @relation(fields: [neighborhoodId], references: [id], onDelete: SetNull)
  photos       Photo[]
  amenities    AmenityOnListing[]
  availability Availability[]
  inquiries    Inquiry[]
  reviews      Review[]
  
  @@index([slug])
  @@index([cityId, status])
  @@index([featured, status])
  @@map("listings")
}

model Photo {
  id        String   @id @default(cuid())
  listingId String
  url       String
  alt       String?
  width     Int?
  height    Int?
  order     Int      @default(0)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
  
  @@index([listingId, order])
  @@map("photos")
}

model AmenityOnListing {
  id        String   @id @default(cuid())
  listingId String
  amenityId String
  note      String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
  amenity Amenity @relation(fields: [amenityId], references: [id], onDelete: Cascade)
  
  @@unique([listingId, amenityId])
  @@map("amenity_on_listing")
}

/// ===== Availability & Calendar =====
model Availability {
  id        String            @id @default(cuid())
  listingId String
  startDate DateTime
  endDate   DateTime
  status    AvailabilityStatus @default(AVAILABLE)
  price     Int?              // override price in cents
  minStay   Int?              // minimum nights
  notes     String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
  
  @@index([listingId, startDate])
  @@map("availability")
}

/// ===== Inquiries & Communication =====
model Inquiry {
  id         String        @id @default(cuid())
  listingId  String
  guestId    String?
  
  // Guest info (for non-registered users)
  guestName  String
  guestEmail String
  guestPhone String?
  
  // Stay details
  checkIn    DateTime
  checkOut   DateTime
  guests     Int
  message    String?
  
  status     InquiryStatus @default(PENDING)
  
  // Spam protection
  ipAddress  String?
  userAgent  String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
  guest   User?   @relation(fields: [guestId], references: [id], onDelete: SetNull)
  
  @@index([listingId, status])
  @@index([guestEmail])
  @@map("inquiries")
}

model Review {
  id        String @id @default(cuid())
  listingId String
  guestId   String?
  rating    Int    // 1-5 stars
  title     String?
  body      String?
  comment   String?
  guestName String?
  source    String @default("manual")
  approved  Boolean @default(false)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
  guest   User?   @relation(fields: [guestId], references: [id], onDelete: SetNull)
  
  @@index([listingId, approved])
  @@map("reviews")
}

/// ===== Subscriptions & Billing =====
model Subscription {
  id                   String   @id @default(cuid())
  ownerId              String
  stripeSubId          String?  @unique
  stripeSubscriptionId String?  @unique
  tier                 Tier
  status               String   // Stripe status
  start                DateTime?
  end                  DateTime?
  currentPeriodStart   DateTime?
  currentPeriodEnd     DateTime?
  cancelAtPeriodEnd    Boolean  @default(false)
  
  // Tier limits
  maxListings          Int      @default(1)
  featuredListings     Int      @default(0)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner    OwnerProfile @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  invoices Invoice[]
  
  @@index([ownerId, status])
  @@map("subscriptions")
}

model Invoice {
  id              String  @id @default(cuid())
  subscriptionId  String
  stripeInvoiceId String? @unique
  amount          Int     // cents
  currency        String  @default("usd")
  status          String  // Stripe status
  paidAt          DateTime?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  subscription Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  
  @@index([subscriptionId])
  @@map("invoices")
}

/// ===== SEO & Content =====
model SeoPage {
  id              String  @id @default(cuid())
  slug            String  @unique
  path            String?
  title           String
  description     String
  metaDescription String?
  h1              String?
  content         String? // Generated content
  
  // Filters represented as JSON
  params          String  // JSON string of search parameters
  citySlug        String?
  neighborhoodSlug String?
  bedrooms        Int?
  amenities       String?   // JSON string of amenity names
  
  // Analytics
  views           Int      @default(0)
  lastViewed      DateTime?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([slug])
  @@index([views])
  @@map("seo_pages")
}

model FeatureFlag {
  id                String  @id @default(cuid())
  name              String  @unique
  description       String?
  enabled           Boolean @default(false)
  rolloutPercentage Int     @default(0) // 0-100
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([name])
  @@map("feature_flags")
}