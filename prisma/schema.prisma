generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String                   @id @default(cuid())
  email                String                   @unique
  name                 String?
  password             String?
  role                 Role                     @default(FREE)
  subscriptionTier     SubscriptionTier         @default(FREE)
  searchesUsed         Int                      @default(0)
  searchesResetAt      DateTime                 @default(now())
  createdAt            DateTime                 @default(now())
  updatedAt            DateTime                 @updatedAt
  lastDashboardVisit   DateTime?
  dashboardVisits      Int                      @default(0)
  searchesThisMonth    Int                      @default(0)
  searchResetDate      DateTime                 @default(now())
  annualEventGoal      Int?                     @default(6)
  annualNetworkingGoal Int?                     @default(100)
  annualRevenueGoal    Float?
  achievements         String?
  achievementPoints    Int                      @default(0)
  stripeCustomerId     String?                  @unique
  stripeSubscriptionId String?                  @unique
  subscriptionStatus   SubscriptionStatus       @default(ACTIVE)
  currentPeriodStart   DateTime?
  currentPeriodEnd     DateTime?
  cancelAtPeriodEnd    Boolean                  @default(false)
  lastSearchLimitCheck DateTime                 @default(now())
  companyId            String?
  accounts             Account[]
  comments             Comment[]
  companyMentions      CompanyMention[]         @relation("CompanyMentionedBy")
  contactMentions      ContactMention[]         @relation("ContactMentionedBy")
  dashboardActivities  DashboardActivity[]
  createdEvents        Event[]                  @relation("EventCreator")
  eventAttendees       EventAttendee[]
  eventRatings         EventRating[]
  forumBookmarks       ForumBookmark[]          @relation("ForumBookmarks")
  forumComments        ForumComment[]           @relation("ForumComments")
  forumCommentVotes    ForumCommentVote[]       @relation("ForumCommentVotes")
  forumPosts           ForumPost[]              @relation("ForumPosts")
  forumVotes           ForumVote[]              @relation("ForumVotes")
  notifications        Notification[]           @relation("UserNotifications")
  payments             Payment[]
  posts                Post[]
  savedSearches        SavedSearch[]
  searches             Search[]
  sessions             Session[]
  subscriptions        Subscription[]
  company              Company?                 @relation("UserCompany", fields: [companyId], references: [id])
  connections          UserConnection[]
  networkingActivity   UserNetworkingActivity[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Company {
  id                 String                   @id @default(cuid())
  name               String                   @unique(map: "unique_company_name")
  slug               String                   @unique
  website            String?                  @unique(map: "unique_company_website")
  logoUrl            String?
  description        String?
  companyType        CompanyType
  agencyType         AgencyType?
  industry           Industry?
  address            String?
  city               String?
  state              String?
  region             Region?
  country            String                   @default("US")
  zipCode            String?
  employeeCount      EmployeeRange?
  revenueRange       RevenueRange?
  teamCount          Int?
  foundedYear        Int?
  stockSymbol        String?
  linkedinUrl        String?
  twitterHandle      String?
  headquarters       String?
  revenue            String?
  parentCompanyId    String?
  verified           Boolean                  @default(false)
  dataQuality        DataQuality              @default(BASIC)
  lastVerified       DateTime?
  verifiedBy         String?
  aiSummary          String?
  lastInsightUpdate  DateTime?
  createdAt          DateTime                 @default(now())
  updatedAt          DateTime                 @updatedAt
  normalizedName     String?
  normalizedWebsite  String?
  insights           CompanyInsight[]
  companyMentions    CompanyMention[]         @relation("CompanyMentioned")
  eventAttendees     EventAttendee[]
  searches           Search[]
  users              User[]                   @relation("UserCompany")
  networkingActivity UserNetworkingActivity[]
  parentCompany      Company?                 @relation("CompanyHierarchy", fields: [parentCompanyId], references: [id])
  subsidiaries       Company[]                @relation("CompanyHierarchy")
  contacts           Contact[]

  @@index([name])
  @@index([companyType])
  @@index([industry])
  @@index([city, state])
  @@index([verified])
  @@index([lastInsightUpdate])
  @@index([normalizedName])
  @@index([normalizedWebsite])
  @@map("companies")
}

model Contact {
  id               String           @id @default(cuid())
  firstName        String
  lastName         String
  fullName         String
  title            String
  email            String?          @unique(map: "unique_contact_email")
  phone            String?
  linkedinUrl      String?
  personalEmail    String?
  department       Department?
  seniority        SeniorityLevel
  primaryRole      ContactRole?
  companyId        String
  territories      String?
  accounts         String?
  budgetRange      BudgetRange?
  name             String?
  isDecisionMaker  Boolean          @default(false)
  verified         Boolean          @default(false)
  dataQuality      DataQuality      @default(BASIC)
  lastVerified     DateTime?
  isActive         Boolean          @default(true)
  preferredContact ContactMethod?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  contactMentions  ContactMention[] @relation("ContactMentioned")
  eventAttendees   EventAttendee[]
  connections      UserConnection[]
  company          Company          @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([firstName, lastName, companyId], map: "unique_contact_per_company")
  @@index([companyId])
  @@index([firstName, lastName])
  @@index([title])
  @@index([department])
  @@index([seniority])
  @@index([verified])
  @@index([email])
  @@index([firstName, lastName, companyId])
  @@map("contacts")
}

model Post {
  id            String       @id @default(cuid())
  userId        String
  title         String
  content       String
  category      PostCategory
  anonymousName String
  votes         Int          @default(0)
  isAnonymous   Boolean      @default(true)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  comments      Comment[]
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([category])
  @@index([createdAt])
  @@index([votes])
}

model Comment {
  id            String   @id @default(cuid())
  postId        String
  userId        String
  content       String
  anonymousName String
  votes         Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  post          Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([postId])
  @@index([createdAt])
}

model Search {
  id           String   @id @default(cuid())
  userId       String
  query        String
  resultsCount Int
  searchType   String?
  companyId    String?
  createdAt    DateTime @default(now())
  company      Company? @relation(fields: [companyId], references: [id])
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([companyId])
  @@index([createdAt])
}

model SavedSearch {
  id           String   @id @default(cuid())
  userId       String
  name         String
  query        String
  filters      String
  alertEnabled Boolean  @default(false)
  lastRun      DateTime @default(now())
  resultCount  Int?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([lastRun])
}

model CompanyInsight {
  id             String      @id @default(cuid())
  companyId      String
  type           InsightType
  title          String
  content        String
  sourceUrl      String?
  relevanceScore Int         @default(50)
  isAiGenerated  Boolean     @default(false)
  createdAt      DateTime    @default(now())
  expiresAt      DateTime?
  company        Company     @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([companyId, type])
  @@index([createdAt])
  @@index([relevanceScore])
}

model UserConnection {
  id           String             @id @default(cuid())
  userId       String
  contactId    String
  relationship ConnectionType
  strength     ConnectionStrength
  source       String
  notes        String?
  lastContact  DateTime?
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  contact      Contact            @relation(fields: [contactId], references: [id], onDelete: Cascade)
  user         User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, contactId])
  @@index([userId])
  @@index([contactId])
  @@index([strength])
}

model SearchSuggestion {
  id          String   @id @default(cuid())
  query       String
  type        String
  description String
  popularity  Int      @default(0)
  category    String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([type])
  @@index([popularity])
  @@index([category])
}

model DashboardActivity {
  id          String       @id @default(cuid())
  userId      String
  actionType  ActivityType
  title       String
  description String?
  metadata    String?
  createdAt   DateTime     @default(now())
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}

model Event {
  id                   String          @id @default(cuid())
  name                 String
  description          String?
  website              String?
  startDate            DateTime
  endDate              DateTime
  location             String
  venue                String?
  category             EventCategory
  industry             String
  estimatedCost        Int?
  attendeeCount        Int?
  isVirtual            Boolean         @default(false)
  isHybrid             Boolean         @default(false)
  imageUrl             String?
  logoUrl              String?
  organizerName        String?
  organizerUrl         String?
  registrationUrl      String?
  callForSpeakers      Boolean         @default(false)
  sponsorshipAvailable Boolean         @default(false)
  createdBy            String?
  status               EventStatus     @default(DRAFT)
  capacity             Int?
  registrationDeadline DateTime?
  eventType            String?
  avgOverallRating     Float?          @default(0)
  avgNetworkingRating  Float?          @default(0)
  avgContentRating     Float?          @default(0)
  avgROIRating         Float?          @default(0)
  totalRatings         Int             @default(0)
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
  creator              User?           @relation("EventCreator", fields: [createdBy], references: [id])
  attendees            EventAttendee[]
  ratings              EventRating[]
  forumPosts           ForumPost[]     @relation("EventForumPosts")

  @@index([startDate])
  @@index([category])
  @@index([location])
  @@index([avgOverallRating])
  @@index([createdBy])
  @@index([status])
  @@index([capacity])
  @@index([registrationDeadline])
}

model EventAttendee {
  id                  String           @id @default(cuid())
  userId              String
  eventId             String
  status              AttendanceStatus @default(INTERESTED)
  isGoing             Boolean          @default(false)
  hasAttended         Boolean          @default(false)
  companyId           String?
  contactId           String?
  registeredAt        DateTime         @default(now())
  connectionsIntended Int              @default(0)
  connectionsMade     Int              @default(0)
  leadsGenerated      Int              @default(0)
  dealsFromEvent      Int              @default(0)
  revenueFromEvent    Float?
  totalCost           Float?
  notes               String?
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  company             Company?         @relation(fields: [companyId], references: [id])
  contact             Contact?         @relation(fields: [contactId], references: [id])
  event               Event            @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user                User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId])
  @@index([userId])
  @@index([eventId])
  @@index([companyId])
  @@index([contactId])
  @@index([registeredAt])
}

model EventRating {
  id               String   @id @default(cuid())
  userId           String
  eventId          String
  overallRating    Int
  networkingRating Int
  contentRating    Int
  roiRating        Int
  review           String?
  wouldRecommend   Boolean
  wouldAttendAgain Boolean
  bestFor          String
  worstAspect      String?
  isVerified       Boolean  @default(false)
  helpfulVotes     Int      @default(0)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  event            Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId])
  @@index([eventId])
  @@index([overallRating])
}

model Subscription {
  id                   String             @id @default(cuid())
  userId               String
  stripeSubscriptionId String             @unique
  stripePriceId        String
  status               SubscriptionStatus
  tier                 SubscriptionTier
  currentPeriodStart   DateTime
  currentPeriodEnd     DateTime
  cancelAtPeriodEnd    Boolean            @default(false)
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  user                 User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
}

model Payment {
  id                    String        @id @default(cuid())
  userId                String
  stripePaymentIntentId String        @unique
  amount                Int
  currency              String        @default("usd")
  status                PaymentStatus
  description           String?
  createdAt             DateTime      @default(now())
  user                  User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model ForumCategory {
  id          String      @id @default(cuid())
  name        String
  description String?
  icon        String?
  color       String?
  slug        String      @unique
  order       Int         @default(0)
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  posts       ForumPost[]

  @@index([slug])
  @@index([order])
}

model ForumPost {
  id              String           @id @default(cuid())
  title           String
  content         String
  slug            String           @unique
  authorId        String
  isAnonymous     Boolean          @default(false)
  anonymousHandle String?
  categoryId      String
  tags            String
  eventId         String?
  urgency         UrgencyLevel     @default(MEDIUM)
  dealSize        DealSize?
  location        String?
  mediaType       String
  views           Int              @default(0)
  upvotes         Int              @default(0)
  downvotes       Int              @default(0)
  bookmarks       Int              @default(0)
  isPinned        Boolean          @default(false)
  isLocked        Boolean          @default(false)
  isFeatured      Boolean          @default(false)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  lastActivityAt  DateTime         @default(now())
  companyMentions CompanyMention[] @relation("PostCompanyMentions")
  contactMentions ContactMention[] @relation("PostContactMentions")
  bookmarkedBy    ForumBookmark[]
  comments        ForumComment[]
  author          User             @relation("ForumPosts", fields: [authorId], references: [id], onDelete: Cascade)
  category        ForumCategory    @relation(fields: [categoryId], references: [id])
  event           Event?           @relation("EventForumPosts", fields: [eventId], references: [id])
  votes           ForumVote[]

  @@index([categoryId])
  @@index([authorId])
  @@index([eventId])
  @@index([createdAt])
  @@index([lastActivityAt])
  @@index([urgency])
  @@index([location])
}

model ForumComment {
  id              String             @id @default(cuid())
  content         String
  authorId        String
  isAnonymous     Boolean            @default(false)
  anonymousHandle String?
  postId          String
  parentId        String?
  depth           Int                @default(0)
  upvotes         Int                @default(0)
  downvotes       Int                @default(0)
  isDeleted       Boolean            @default(false)
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  author          User               @relation("ForumComments", fields: [authorId], references: [id], onDelete: Cascade)
  parent          ForumComment?      @relation("CommentReplies", fields: [parentId], references: [id])
  replies         ForumComment[]     @relation("CommentReplies")
  post            ForumPost          @relation(fields: [postId], references: [id], onDelete: Cascade)
  votes           ForumCommentVote[]

  @@index([postId])
  @@index([authorId])
  @@index([parentId])
  @@index([createdAt])
}

model ForumVote {
  id        String    @id @default(cuid())
  userId    String
  postId    String
  type      VoteType
  createdAt DateTime  @default(now())
  post      ForumPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User      @relation("ForumVotes", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@index([postId])
}

model ForumCommentVote {
  id        String       @id @default(cuid())
  userId    String
  commentId String
  type      VoteType
  createdAt DateTime     @default(now())
  comment   ForumComment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user      User         @relation("ForumCommentVotes", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, commentId])
  @@index([commentId])
}

model ForumBookmark {
  id        String    @id @default(cuid())
  userId    String
  postId    String
  createdAt DateTime  @default(now())
  post      ForumPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User      @relation("ForumBookmarks", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@index([userId])
}

model CompanyMention {
  id          String    @id @default(cuid())
  postId      String
  companyId   String
  mentionedBy String
  createdAt   DateTime  @default(now())
  company     Company   @relation("CompanyMentioned", fields: [companyId], references: [id], onDelete: Cascade)
  user        User      @relation("CompanyMentionedBy", fields: [mentionedBy], references: [id], onDelete: Cascade)
  post        ForumPost @relation("PostCompanyMentions", fields: [postId], references: [id], onDelete: Cascade)

  @@unique([postId, companyId, mentionedBy])
  @@index([postId])
  @@index([companyId])
  @@index([mentionedBy])
  @@index([createdAt])
}

model ContactMention {
  id          String    @id @default(cuid())
  postId      String
  contactId   String
  mentionedBy String
  createdAt   DateTime  @default(now())
  contact     Contact   @relation("ContactMentioned", fields: [contactId], references: [id], onDelete: Cascade)
  user        User      @relation("ContactMentionedBy", fields: [mentionedBy], references: [id], onDelete: Cascade)
  post        ForumPost @relation("PostContactMentions", fields: [postId], references: [id], onDelete: Cascade)

  @@unique([postId, contactId, mentionedBy])
  @@index([postId])
  @@index([contactId])
  @@index([mentionedBy])
  @@index([createdAt])
}

model UserNetworkingActivity {
  id              String                 @id @default(cuid())
  userId          String
  companyId       String?
  interactionType NetworkingActivityType
  metadata        String?
  createdAt       DateTime               @default(now())
  company         Company?               @relation(fields: [companyId], references: [id])
  user            User                   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([companyId])
  @@index([interactionType])
  @@index([createdAt])
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  type      NotificationType
  title     String
  message   String
  metadata  String?
  read      Boolean          @default(false)
  actionUrl String?
  createdAt DateTime         @default(now())
  readAt    DateTime?
  user      User             @relation("UserNotifications", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([type])
  @@index([read])
  @@index([createdAt])
}

enum Role {
  FREE
  PRO
  TEAM_ADMIN
  ADMIN
}

enum InsightType {
  NEWS
  LEADERSHIP_CHANGE
  FUNDING
  ACQUISITION
  PRODUCT_LAUNCH
  MARKET_EXPANSION
  FINANCIAL_RESULTS
  HIRING_SURGE
  MEDIA_SPEND_CHANGE
  COMPETITIVE_INTEL
  PARTNERSHIP
  OFFICE_MOVE
  REGULATORY_CHANGE
  INDUSTRY_TREND
  AI_SUMMARY
}

enum ConnectionType {
  COLLEAGUE
  FORMER_COLLEAGUE
  CLIENT
  VENDOR
  EVENT_CONNECTION
  REFERRAL
  SOCIAL_MEDIA
  MUTUAL_CONNECTION
  INDUSTRY_CONTACT
  PROSPECT
}

enum ConnectionStrength {
  STRONG
  MEDIUM
  WEAK
}

enum SubscriptionTier {
  FREE
  PRO
  TEAM
}

enum CompanyType {
  INDEPENDENT_AGENCY
  HOLDING_COMPANY_AGENCY
  MEDIA_HOLDING_COMPANY
  NATIONAL_ADVERTISER
  LOCAL_ADVERTISER
  ADTECH_VENDOR
  MARTECH_VENDOR
  MEDIA_OWNER
  BROADCASTER
  PUBLISHER
  CONSULTANCY
  PRODUCTION_COMPANY
  ADVERTISER
  AGENCY
  MEDIA_COMPANY
  TECH_VENDOR
}

enum AgencyType {
  FULL_SERVICE
  MEDIA_SPECIALIST
  CREATIVE_SPECIALIST
  DIGITAL_SPECIALIST
  PROGRAMMATIC_SPECIALIST
  SOCIAL_MEDIA_SPECIALIST
  SEARCH_SPECIALIST
  INFLUENCER_SPECIALIST
  PERFORMANCE_MARKETING
  BRAND_STRATEGY
  MEDIA_PLANNING
  MEDIA_BUYING
  DATA_ANALYTICS
  CONTENT_MARKETING
}

enum Industry {
  AUTOMOTIVE
  CPG_FOOD_BEVERAGE
  CPG_PERSONAL_CARE
  CPG_HOUSEHOLD
  FINANCIAL_SERVICES
  HEALTHCARE_PHARMA
  RETAIL_ECOMMERCE
  TECHNOLOGY
  ENTERTAINMENT_MEDIA
  TRAVEL_HOSPITALITY
  TELECOM
  FASHION_BEAUTY
  SPORTS_FITNESS
  EDUCATION
  REAL_ESTATE
  ENERGY
  GOVERNMENT_NONPROFIT
  GAMING
  CRYPTOCURRENCY
  INSURANCE
  B2B_SERVICES
  STARTUPS
  NONPROFIT
  PROFESSIONAL_SERVICES
  LOGISTICS
}

enum PostCategory {
  ACCOUNT_MOVES
  RFPS
  INDUSTRY_NEWS
  QA
  NETWORKING
  DEALS
  EVENTS
}

enum EventStatus {
  DRAFT
  PUBLISHED
  CANCELLED
  COMPLETED
  SUSPENDED
}

enum EventCategory {
  CONFERENCE
  TRADE_SHOW
  SUMMIT
  WORKSHOP
  NETWORKING
  AWARDS
  WEBINAR
  MASTERCLASS
}

enum EventIndustry {
  DIGITAL_ADVERTISING
  TV_BROADCASTING
  RADIO
  PRINT_MEDIA
  OUT_OF_HOME
  STREAMING
  PODCASTING
  ADTECH
  MARTECH
  PROGRAMMATIC
  SOCIAL_MEDIA
  INFLUENCER
  EMAIL_MARKETING
  MOBILE_ADVERTISING
  VIDEO_ADVERTISING
  DATA_ANALYTICS
}

enum AttendanceStatus {
  INTERESTED
  PLANNING_TO_ATTEND
  REGISTERED
  ATTENDING
  ATTENDED
  CANCELLED
}

enum EventBestFor {
  NEW_BUSINESS
  LEARNING
  NETWORKING
  PRODUCT_DEMOS
  PARTNERSHIPS
  RECRUITING
  BRAND_AWARENESS
  THOUGHT_LEADERSHIP
}

enum ActivityType {
  SEARCH
  EVENT_ATTENDED
  EVENT_REGISTERED
  FORUM_POST
  CONNECTION_MADE
  GOAL_ACHIEVED
  MILESTONE_REACHED
  UPGRADE_PROMPT_SHOWN
  UPGRADE_COMPLETED
  ACHIEVEMENT_UNLOCKED
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  INCOMPLETE
  INCOMPLETE_EXPIRED
  PAST_DUE
  UNPAID
  TRIALING
}

enum PaymentStatus {
  SUCCEEDED
  PENDING
  FAILED
  CANCELED
  REFUNDED
}

enum UrgencyLevel {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum DealSize {
  SMALL
  MEDIUM
  LARGE
  ENTERPRISE
}

enum VoteType {
  UPVOTE
  DOWNVOTE
}

enum MediaType {
  DIGITAL_DISPLAY
  SEARCH_SEM
  SOCIAL_MEDIA
  VIDEO_STREAMING
  CONNECTED_TV
  TRADITIONAL_TV
  RADIO
  PODCAST
  PRINT_NEWSPAPER
  PRINT_MAGAZINE
  OUT_OF_HOME
  BILLBOARD
  TRANSIT
  CINEMA
  DIRECT_MAIL
  EMAIL_MARKETING
  INFLUENCER
  PROGRAMMATIC
  NATIVE_ADVERTISING
  AFFILIATE
  MOBILE_APP
  AUDIO_STREAMING
  GAMING_ADVERTISING
  VIRTUAL_REALITY
}

enum Region {
  NORTHEAST
  SOUTHEAST
  MIDWEST
  SOUTHWEST
  WEST
  NORTHWEST
  NATIONAL
  INTERNATIONAL
  CANADA
  GLOBAL
}

enum EmployeeRange {
  STARTUP_1_10
  SMALL_11_50
  MEDIUM_51_200
  LARGE_201_1000
  ENTERPRISE_1001_5000
  MEGA_5000_PLUS
}

enum RevenueRange {
  UNDER_1M
  RANGE_1M_5M
  RANGE_5M_25M
  RANGE_25M_100M
  RANGE_100M_500M
  RANGE_500M_1B
  OVER_1B
  UNDISCLOSED
}

enum Department {
  MEDIA_PLANNING
  MEDIA_BUYING
  DIGITAL_MARKETING
  PROGRAMMATIC
  SOCIAL_MEDIA
  SEARCH_MARKETING
  STRATEGY_PLANNING
  ANALYTICS_INSIGHTS
  CREATIVE_SERVICES
  ACCOUNT_MANAGEMENT
  BUSINESS_DEVELOPMENT
  OPERATIONS
  TECHNOLOGY
  FINANCE
  LEADERSHIP
  HUMAN_RESOURCES
  SALES
  MARKETING
  PRODUCT
  DATA_SCIENCE
}

enum SeniorityLevel {
  INTERN
  COORDINATOR
  SPECIALIST
  SENIOR_SPECIALIST
  MANAGER
  SENIOR_MANAGER
  DIRECTOR
  SENIOR_DIRECTOR
  VP
  SVP
  EVP
  C_LEVEL
  FOUNDER_OWNER
}

enum ContactRole {
  MEDIA_BUYER
  MEDIA_PLANNER
  STRATEGIST
  ANALYST
  CREATIVE
  ACCOUNT_MANAGER
  PROJECT_MANAGER
  BUSINESS_DEVELOPER
  DECISION_MAKER
  INFLUENCER
  GATEKEEPER
  IMPLEMENTER
  ADVISOR
  BUDGET_HOLDER
  PROCUREMENT
}

enum DataQuality {
  BASIC
  VERIFIED
  PREMIUM
  EXPERT_VERIFIED
}

enum ContactMethod {
  EMAIL
  PHONE
  LINKEDIN
  DIRECT_MESSAGE
  NO_CONTACT
}

enum BudgetRange {
  UNDER_10K
  RANGE_10K_25K
  RANGE_25K_50K
  RANGE_50K_100K
  RANGE_100K_250K
  RANGE_250K_500K
  RANGE_500K_1M
  RANGE_1M_5M
  RANGE_5M_25M
  OVER_25M
  CONFIDENTIAL
}

enum NetworkingActivityType {
  FORUM_POST_CREATED
  FORUM_COMMENT_POSTED
  COMPANY_MENTIONED
  CONTACT_MENTIONED
  POST_BOOKMARKED
  USER_FOLLOWED
  PROFILE_VIEWED
  COMPANY_PROFILE_VIEWED
  CONTACT_PROFILE_VIEWED
  NETWORKING_EVENT_JOINED
  DISCUSSION_PARTICIPATED
  EXPERTISE_SHARED
  QUESTION_ANSWERED
  OPPORTUNITY_SHARED
  INTRODUCTION_MADE
  CONNECTION_REQUESTED
  MESSAGE_SENT
}

enum NotificationType {
  COMPANY_MENTIONED
  CONTACT_MENTIONED
  FORUM_POST_REPLY
  EVENT_REMINDER
  CONNECTION_REQUEST
  ACHIEVEMENT_UNLOCKED
  SYSTEM_ANNOUNCEMENT
}
