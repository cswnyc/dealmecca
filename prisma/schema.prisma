generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  User              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model CodeGeneration {
  id            String   @id
  userId        String
  prompt        String
  language      String
  framework     String?
  codeType      String
  complexity    String
  generatedCode String
  explanation   String?
  dependencies  String   @default("")
  suggestions   String   @default("")
  executionTime Int?
  tokensUsed    Int?
  qualityScore  Float?
  wasUseful     Boolean?
  forumPostId   String?
  createdAt     DateTime @default(now())
  User          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([codeType])
  @@index([createdAt])
  @@index([forumPostId])
  @@index([language])
  @@index([userId])
}

model Comment {
  id            String   @id
  postId        String
  userId        String
  content       String
  anonymousName String
  votes         Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime
  Post          Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  User          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([createdAt])
  @@index([postId])
}

model CompanyFollow {
  id        String    @id
  userId    String
  companyId String
  createdAt DateTime  @default(now())
  company   Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  User      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, companyId])
  @@index([companyId])
  @@index([createdAt])
  @@index([userId])
}

model CompanyInsight {
  id             String      @id
  companyId      String
  type           InsightType
  title          String
  content        String
  sourceUrl      String?
  relevanceScore Int         @default(50)
  isAiGenerated  Boolean     @default(false)
  createdAt      DateTime    @default(now())
  expiresAt      DateTime?
  company        Company     @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([companyId, type])
  @@index([createdAt])
  @@index([relevanceScore])
}

model CompanyMention {
  id          String    @id
  postId      String
  companyId   String
  mentionedBy String
  createdAt   DateTime  @default(now())
  company     Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  User        User      @relation(fields: [mentionedBy], references: [id], onDelete: Cascade)
  ForumPost   ForumPost @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([postId, companyId, mentionedBy])
  @@index([companyId])
  @@index([createdAt])
  @@index([mentionedBy])
  @@index([postId])
}

model CompanyPartnership {
  id               String          @id
  agencyId         String
  advertiserId     String
  relationshipType PartnershipType @default(AGENCY_CLIENT)
  isAOR            Boolean         @default(false)
  services         String?
  startDate        DateTime?
  endDate          DateTime?
  isActive         Boolean         @default(true)
  notes            String?
  contractValue    Float?
  primaryContact   String?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime
  advertiser       Company         @relation("CompanyPartnership_advertiserIdToCompany", fields: [advertiserId], references: [id], onDelete: Cascade)
  agency           Company         @relation("CompanyPartnership_agencyIdToCompany", fields: [agencyId], references: [id], onDelete: Cascade)

  @@unique([agencyId, advertiserId])
  @@index([advertiserId])
  @@index([agencyId])
  @@index([endDate])
  @@index([isActive])
  @@index([relationshipType])
  @@index([startDate])
}

model ContactInteraction {
  id          String          @id
  contactId   String
  userId      String
  type        InteractionType
  notes       String?
  outcome     String?
  followUpAt  DateTime?
  scheduledAt DateTime?
  completedAt DateTime?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime
  contact     Contact         @relation(fields: [contactId], references: [id], onDelete: Cascade)
  User        User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([contactId])
  @@index([followUpAt])
  @@index([type])
  @@index([userId])
}

model ContactMention {
  id          String    @id
  postId      String
  contactId   String
  mentionedBy String
  createdAt   DateTime  @default(now())
  contact     Contact   @relation(fields: [contactId], references: [id], onDelete: Cascade)
  User        User      @relation(fields: [mentionedBy], references: [id], onDelete: Cascade)
  ForumPost   ForumPost @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([postId, contactId, mentionedBy])
  @@index([contactId])
  @@index([createdAt])
  @@index([mentionedBy])
  @@index([postId])
}

model ContactNote {
  id        String   @id
  contactId String
  userId    String
  content   String
  isPrivate Boolean  @default(false)
  tags      String   @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime
  contact   Contact  @relation(fields: [contactId], references: [id], onDelete: Cascade)
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([contactId])
  @@index([userId])
}

model ContactStatus {
  id           String     @id
  contactId    String     @unique
  userId       String
  status       LeadStatus @default(NEW)
  priority     Priority   @default(MEDIUM)
  leadScore    Int?
  lastActivity DateTime?
  nextAction   String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime
  contact      Contact    @relation(fields: [contactId], references: [id], onDelete: Cascade)
  User         User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([leadScore])
  @@index([priority])
  @@index([status])
  @@index([userId])
}

model DashboardActivity {
  id          String       @id
  userId      String
  actionType  ActivityType
  title       String
  description String?
  metadata    String?
  createdAt   DateTime     @default(now())
  User        User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}

model Event {
  id                   String          @id
  name                 String
  description          String?
  website              String?
  startDate            DateTime
  endDate              DateTime
  location             String
  venue                String?
  category             EventCategory
  industry             String
  estimatedCost        Int?
  attendeeCount        Int?
  isVirtual            Boolean         @default(false)
  isHybrid             Boolean         @default(false)
  imageUrl             String?
  logoUrl              String?
  organizerName        String?
  organizerUrl         String?
  registrationUrl      String?
  callForSpeakers      Boolean         @default(false)
  sponsorshipAvailable Boolean         @default(false)
  createdBy            String?
  status               EventStatus     @default(DRAFT)
  capacity             Int?
  registrationDeadline DateTime?
  eventType            String?
  avgOverallRating     Float?          @default(0)
  avgNetworkingRating  Float?          @default(0)
  avgContentRating     Float?          @default(0)
  avgROIRating         Float?          @default(0)
  totalRatings         Int             @default(0)
  createdAt            DateTime        @default(now())
  updatedAt            DateTime
  User                 User?           @relation(fields: [createdBy], references: [id])
  EventAttendee        EventAttendee[]
  EventRating          EventRating[]
  ForumPost            ForumPost[]

  @@index([avgOverallRating])
  @@index([capacity])
  @@index([category])
  @@index([createdBy])
  @@index([location])
  @@index([registrationDeadline])
  @@index([startDate])
  @@index([status])
}

model EventAttendee {
  id                  String           @id
  userId              String
  eventId             String
  status              AttendanceStatus @default(INTERESTED)
  isGoing             Boolean          @default(false)
  hasAttended         Boolean          @default(false)
  companyId           String?
  contactId           String?
  registeredAt        DateTime         @default(now())
  connectionsIntended Int              @default(0)
  connectionsMade     Int              @default(0)
  leadsGenerated      Int              @default(0)
  dealsFromEvent      Int              @default(0)
  revenueFromEvent    Float?
  totalCost           Float?
  notes               String?
  createdAt           DateTime         @default(now())
  updatedAt           DateTime
  company             Company?         @relation(fields: [companyId], references: [id])
  contact             Contact?         @relation(fields: [contactId], references: [id])
  Event               Event            @relation(fields: [eventId], references: [id], onDelete: Cascade)
  User                User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId])
  @@index([companyId])
  @@index([contactId])
  @@index([eventId])
  @@index([registeredAt])
  @@index([userId])
}

model EventRating {
  id               String   @id
  userId           String
  eventId          String
  overallRating    Int
  networkingRating Int
  contentRating    Int
  roiRating        Int
  review           String?
  wouldRecommend   Boolean
  wouldAttendAgain Boolean
  bestFor          String
  worstAspect      String?
  isVerified       Boolean  @default(false)
  helpfulVotes     Int      @default(0)
  createdAt        DateTime @default(now())
  updatedAt        DateTime
  Event            Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  User             User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId])
  @@index([eventId])
  @@index([overallRating])
}

model ForumBookmark {
  id        String    @id
  userId    String
  postId    String
  createdAt DateTime  @default(now())
  ForumPost ForumPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  User      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@index([userId])
}

model ForumCategory {
  id          String      @id
  name        String
  description String?
  icon        String?
  color       String?
  slug        String      @unique
  order       Int         @default(0)
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  ForumPost   ForumPost[]
  Topic       Topic[]

  @@index([order])
  @@index([slug])
}

model ForumComment {
  id                 String             @id
  content            String
  authorId           String
  isAnonymous        Boolean            @default(false)
  anonymousHandle    String?
  anonymousAvatarId  String?
  postId             String
  parentId           String?
  depth              Int                @default(0)
  upvotes            Int                @default(0)
  downvotes          Int                @default(0)
  isDeleted          Boolean            @default(false)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime
  User               User               @relation(fields: [authorId], references: [id], onDelete: Cascade)
  ForumComment       ForumComment?      @relation("ForumCommentToForumComment", fields: [parentId], references: [id])
  other_ForumComment ForumComment[]     @relation("ForumCommentToForumComment")
  ForumPost          ForumPost          @relation(fields: [postId], references: [id], onDelete: Cascade)
  ForumCommentVote   ForumCommentVote[]

  @@index([authorId])
  @@index([createdAt])
  @@index([parentId])
  @@index([postId])
}

model ForumCommentVote {
  id           String       @id
  userId       String
  commentId    String
  type         VoteType
  createdAt    DateTime     @default(now())
  ForumComment ForumComment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  User         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, commentId])
  @@index([commentId])
}

model ForumPost {
  id                 String           @id
  title              String
  content            String
  slug               String           @unique
  authorId           String
  isAnonymous        Boolean          @default(false)
  anonymousHandle    String?
  categoryId         String
  tags               String
  eventId            String?
  urgency            UrgencyLevel     @default(MEDIUM)
  dealSize           DealSize?
  location           String?
  mediaType          String
  views              Int              @default(0)
  upvotes            Int              @default(0)
  downvotes          Int              @default(0)
  bookmarks          Int              @default(0)
  isPinned           Boolean          @default(false)
  isLocked           Boolean          @default(false)
  isFeatured         Boolean          @default(false)
  status             PostStatus       @default(PENDING)
  approvedAt         DateTime?
  approvedBy         String?
  createdAt          DateTime         @default(now())
  updatedAt          DateTime
  lastActivityAt     DateTime         @default(now())
  aiProcessed        Boolean          @default(false)
  aiProcessedAt      DateTime?
  aiSummary          String?
  aiTags             Json?
  aiVersion          String?
  extractedCompanies String           @default("")
  postType           String           @default("post")
  listItems          String           @default("")
  pollChoices        String           @default("")
  pollDuration       Int?
  pollEndsAt         DateTime?
  codeLanguage       String?
  codeFramework      String?
  codeType           String?
  codeComplexity     String?
  generatedCode      String?
  primaryTopicType   String?
  primaryTopicId     String?
  CompanyMention     CompanyMention[]
  ContactMention     ContactMention[]
  ForumBookmark      ForumBookmark[]
  ForumComment       ForumComment[]
  User               User             @relation(fields: [authorId], references: [id], onDelete: Cascade)
  ForumCategory      ForumCategory    @relation(fields: [categoryId], references: [id])
  Event              Event?           @relation(fields: [eventId], references: [id])
  ForumVote          ForumVote[]
  PollVote           PollVote[]
  PostBookmark       PostBookmark[]
  PostFollow         PostFollow[]
  TopicMention       TopicMention[]

  @@index([authorId])
  @@index([categoryId])
  @@index([createdAt])
  @@index([eventId])
  @@index([lastActivityAt])
  @@index([location])
  @@index([urgency])
}

model ForumVote {
  id        String    @id
  userId    String
  postId    String
  type      VoteType
  createdAt DateTime  @default(now())
  ForumPost ForumPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  User      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@index([postId])
}

model PollVote {
  id          String    @id @default(cuid())
  userId      String
  postId      String
  choiceIndex Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  ForumPost   ForumPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  User        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@index([postId])
}

model Notification {
  id        String           @id
  userId    String
  type      NotificationType
  title     String
  message   String
  metadata  String?
  read      Boolean          @default(false)
  actionUrl String?
  createdAt DateTime         @default(now())
  readAt    DateTime?
  User      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([createdAt])
  @@index([read])
  @@index([type])
  @@index([userId])
}

model Payment {
  id                    String        @id
  userId                String
  stripePaymentIntentId String        @unique
  amount                Int
  currency              String        @default("usd")
  status                PaymentStatus
  description           String?
  createdAt             DateTime      @default(now())
  User                  User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Post {
  id                 String               @id
  userId             String
  title              String
  content            String
  category           PostCategory
  anonymousName      String
  votes              Int                  @default(0)
  isAnonymous        Boolean              @default(true)
  extractedCompanies String               @default("")
  aiTags             String               @default("")
  aiSummary          String?
  aiProcessed        Boolean              @default(false)
  aiProcessedAt      DateTime?
  aiVersion          String?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime
  Comment            Comment[]
  User               User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  PostContactMention PostContactMention[]

  @@index([aiProcessedAt])
  @@index([aiProcessed])
  @@index([category])
  @@index([createdAt])
  @@index([votes])
}

model PostBookmark {
  id        String    @id
  userId    String
  postId    String
  createdAt DateTime  @default(now())
  ForumPost ForumPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  User      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@index([postId])
  @@index([userId])
}

model PostContactMention {
  id         String   @id
  postId     String
  contactId  String
  context    String?
  confidence Float?
  aiDetected Boolean  @default(true)
  verified   Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime
  contact    Contact  @relation(fields: [contactId], references: [id], onDelete: Cascade)
  Post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([postId, contactId])
  @@index([aiDetected])
  @@index([confidence])
  @@index([contactId])
  @@index([createdAt])
  @@index([postId])
  @@index([verified])
}

model PostFollow {
  id        String    @id
  userId    String
  postId    String
  createdAt DateTime  @default(now())
  ForumPost ForumPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  User      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@index([postId])
  @@index([userId])
}

model SavedSearch {
  id           String   @id
  userId       String
  name         String
  description  String?
  query        String
  filters      Json
  alertEnabled Boolean  @default(false)
  isActive     Boolean  @default(true)
  lastRun      DateTime @default(now())
  resultCount  Int?
  createdAt    DateTime @default(now())
  updatedAt    DateTime
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([isActive])
  @@index([lastRun])
  @@index([userId])
}

model Search {
  id           String   @id
  userId       String
  query        String
  resultsCount Int
  searchType   String?
  companyId    String?
  createdAt    DateTime @default(now())
  company      Company? @relation(fields: [companyId], references: [id])
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([companyId])
  @@index([createdAt])
  @@index([userId])
}

model SearchSuggestion {
  id          String   @id
  query       String
  type        String
  description String
  popularity  Int      @default(0)
  category    String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime

  @@index([category])
  @@index([popularity])
  @@index([type])
}

model Session {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Subscription {
  id                   String             @id
  userId               String
  stripeSubscriptionId String             @unique
  stripePriceId        String
  status               SubscriptionStatus
  tier                 SubscriptionTier
  currentPeriodStart   DateTime
  currentPeriodEnd     DateTime
  cancelAtPeriodEnd    Boolean            @default(false)
  createdAt            DateTime           @default(now())
  updatedAt            DateTime
  User                 User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([status])
  @@index([userId])
}

model Topic {
  id            String         @id
  name          String
  description   String?
  categoryId    String?
  context       String?
  color         String?        @default("#3B82F6")
  icon          String?
  isActive      Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime
  ForumCategory ForumCategory? @relation(fields: [categoryId], references: [id])
  TopicCompany  TopicCompany[]
  TopicContact  TopicContact[]
  TopicFollow   TopicFollow[]
  TopicMention  TopicMention[]

  @@index([categoryId])
  @@index([isActive])
  @@index([name])
}

model TopicCompany {
  id        String   @id
  topicId   String
  companyId String
  role      String?
  context   String?
  order     Int      @default(0)
  createdAt DateTime @default(now())
  company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  Topic     Topic    @relation(fields: [topicId], references: [id], onDelete: Cascade)

  @@unique([topicId, companyId])
  @@index([companyId])
  @@index([order])
  @@index([topicId])
}

model TopicContact {
  id        String   @id
  topicId   String
  contactId String
  role      String?
  context   String?
  order     Int      @default(0)
  createdAt DateTime @default(now())
  contact   Contact  @relation(fields: [contactId], references: [id], onDelete: Cascade)
  Topic     Topic    @relation(fields: [topicId], references: [id], onDelete: Cascade)

  @@unique([topicId, contactId])
  @@index([contactId])
  @@index([order])
  @@index([topicId])
}

model TopicMention {
  id        String    @id
  postId    String
  topicId   String
  order     Int       @default(0)
  createdAt DateTime  @default(now())
  ForumPost ForumPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  Topic     Topic     @relation(fields: [topicId], references: [id], onDelete: Cascade)

  @@unique([postId, topicId])
  @@index([order])
  @@index([postId])
  @@index([topicId])
}

model TopicFollow {
  id        String   @id @default(cuid())
  userId    String
  topicId   String
  createdAt DateTime @default(now())
  Topic     Topic    @relation(fields: [topicId], references: [id], onDelete: Cascade)
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, topicId])
  @@index([topicId])
  @@index([userId])
}

model User {
  id                                                              String                   @id @default(cuid())
  email                                                           String?                  @unique
  firebaseUid                                                     String?                  @unique
  name                                                            String?
  password                                                        String?
  role                                                            Role                     @default(FREE)
  subscriptionTier                                                SubscriptionTier         @default(FREE)
  isAnonymous                                                     Boolean                  @default(true)
  anonymousUsername                                               String?                  @unique
  avatarSeed                                                      String?
  anonymousHandle                                                 String?                  @unique
  searchesUsed                                                    Int                      @default(0)
  searchesResetAt                                                 DateTime                 @default(now())
  createdAt                                                       DateTime                 @default(now())
  updatedAt                                                       DateTime                 @updatedAt
  lastDashboardVisit                                              DateTime?
  dashboardVisits                                                 Int                      @default(0)
  searchesThisMonth                                               Int                      @default(0)
  searchResetDate                                                 DateTime                 @default(now())
  annualEventGoal                                                 Int?                     @default(6)
  annualNetworkingGoal                                            Int?                     @default(100)
  annualRevenueGoal                                               Float?
  achievements                                                    String?
  achievementPoints                                               Int                      @default(0)
  stripeCustomerId                                                String?                  @unique
  stripeSubscriptionId                                            String?                  @unique
  subscriptionStatus                                              SubscriptionStatus       @default(ACTIVE)
  currentPeriodStart                                              DateTime?
  currentPeriodEnd                                                DateTime?
  cancelAtPeriodEnd                                               Boolean                  @default(false)
  lastSearchLimitCheck                                            DateTime                 @default(now())
  companyId                                                       String?
  provider                                                        String?
  publicHandle                                                    String?                  @unique
  Account                                                         Account[]
  CodeGeneration                                                  CodeGeneration[]
  Comment                                                         Comment[]
  CompanyFollow                                                   CompanyFollow[]
  CompanyMention                                                  CompanyMention[]
  ContactInteraction                                              ContactInteraction[]
  ContactMention                                                  ContactMention[]
  ContactNote                                                     ContactNote[]
  ContactStatus                                                   ContactStatus[]
  DashboardActivity                                               DashboardActivity[]
  Event                                                           Event[]
  EventAttendee                                                   EventAttendee[]
  EventRating                                                     EventRating[]
  ForumBookmark                                                   ForumBookmark[]
  ForumComment                                                    ForumComment[]
  ForumCommentVote                                                ForumCommentVote[]
  ForumPost                                                       ForumPost[]
  ForumVote                                                       ForumVote[]
  PollVote                                                        PollVote[]
  Notification                                                    Notification[]
  Payment                                                         Payment[]
  Post                                                            Post[]
  PostBookmark                                                    PostBookmark[]
  PostFollow                                                      PostFollow[]
  SavedSearch                                                     SavedSearch[]
  Search                                                          Search[]
  Session                                                         Session[]
  Subscription                                                    Subscription[]
  TopicFollow                                                     TopicFollow[]
  company                                                         Company?                 @relation(fields: [companyId], references: [id])
  UserConnection                                                  UserConnection[]
  UserFollow_UserFollow_followerIdToUser                          UserFollow[]             @relation("UserFollow_followerIdToUser")
  UserFollow_UserFollow_followingIdToUser                         UserFollow[]             @relation("UserFollow_followingIdToUser")
  UserNetworkingActivity                                          UserNetworkingActivity[]
  ViewedContact                                                   ViewedContact[]
  analytics_events                                                analytics_events[]
  introduction_requests_introduction_requests_facilitatorIdToUser introduction_requests[]  @relation("introduction_requests_facilitatorIdToUser")
  introduction_requests_introduction_requests_requesterIdToUser   introduction_requests[]  @relation("introduction_requests_requesterIdToUser")
}

model UserConnection {
  id           String             @id
  userId       String
  contactId    String
  relationship ConnectionType
  strength     ConnectionStrength
  source       String
  notes        String?
  lastContact  DateTime?
  createdAt    DateTime           @default(now())
  updatedAt    DateTime
  contact      Contact            @relation(fields: [contactId], references: [id], onDelete: Cascade)
  User         User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, contactId])
  @@index([contactId])
  @@index([strength])
  @@index([userId])
}

model UserFollow {
  id                                String   @id
  followerId                        String
  followingId                       String
  createdAt                         DateTime @default(now())
  User_UserFollow_followerIdToUser  User     @relation("UserFollow_followerIdToUser", fields: [followerId], references: [id], onDelete: Cascade)
  User_UserFollow_followingIdToUser User     @relation("UserFollow_followingIdToUser", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@index([createdAt])
  @@index([followerId])
  @@index([followingId])
}

model UserNetworkingActivity {
  id              String                 @id
  userId          String
  companyId       String?
  interactionType NetworkingActivityType
  metadata        String?
  createdAt       DateTime               @default(now())
  company         Company?               @relation(fields: [companyId], references: [id])
  User            User                   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([companyId])
  @@index([createdAt])
  @@index([interactionType])
  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model ViewedContact {
  id        String   @id
  userId    String
  contactId String
  viewedAt  DateTime @default(now())
  duration  Int?
  contact   Contact  @relation(fields: [contactId], references: [id], onDelete: Cascade)
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, contactId])
  @@index([userId])
  @@index([viewedAt])
}

model WaitlistEmail {
  id        String         @id @default(cuid())
  email     String         @unique
  source    String         @default("invite-only")
  status    WaitlistStatus @default(PENDING)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  @@index([createdAt])
  @@index([email])
  @@index([status])
}

model analytics_events {
  id            String   @id
  userId        String?
  sessionId     String
  eventType     String
  eventCategory String
  eventAction   String
  eventLabel    String?
  eventValue    Int?
  metadata      Json?
  createdAt     DateTime @default(now())
  User          User?    @relation(fields: [userId], references: [id])

  @@index([createdAt])
  @@index([eventCategory])
  @@index([eventType])
  @@index([sessionId])
  @@index([userId])
}

model Company {
  id                                                          String                   @id
  name                                                        String                   @unique(map: "unique_company_name")
  slug                                                        String                   @unique
  website                                                     String?                  @unique(map: "unique_company_website")
  logoUrl                                                     String?
  description                                                 String?
  companyType                                                 CompanyType
  agencyType                                                  AgencyType?
  industry                                                    Industry?
  address                                                     String?
  city                                                        String?
  state                                                       String?
  region                                                      Region?
  country                                                     String                   @default("US")
  zipCode                                                     String?
  employeeCount                                               EmployeeRange?
  revenueRange                                                RevenueRange?
  teamCount                                                   Int?
  foundedYear                                                 Int?
  stockSymbol                                                 String?
  linkedinUrl                                                 String?
  twitterHandle                                               String?
  headquarters                                                String?
  revenue                                                     String?
  advertisingModel                                            AdvertisingModel?
  parentCompanyId                                             String?
  verified                                                    Boolean                  @default(false)
  dataQuality                                                 DataQuality              @default(BASIC)
  lastVerified                                                DateTime?
  verifiedBy                                                  String?
  aiSummary                                                   String?
  lastInsightUpdate                                           DateTime?
  createdAt                                                   DateTime                 @default(now())
  updatedAt                                                   DateTime
  normalizedName                                              String?
  normalizedWebsite                                           String?
  CompanyFollow                                               CompanyFollow[]
  CompanyInsight                                              CompanyInsight[]
  CompanyMention                                              CompanyMention[]
  CompanyPartnership_advertiserIdToCompany                    CompanyPartnership[]     @relation("CompanyPartnership_advertiserIdToCompany")
  CompanyPartnership_agencyIdToCompany                        CompanyPartnership[]     @relation("CompanyPartnership_agencyIdToCompany")
  EventAttendee                                               EventAttendee[]
  Search                                                      Search[]
  TopicCompany                                                TopicCompany[]
  User                                                        User[]
  UserNetworkingActivity                                      UserNetworkingActivity[]
  parentCompany                                               Company?                 @relation("CompanyHierarchy", fields: [parentCompanyId], references: [id])
  subsidiaries                                                Company[]                @relation("CompanyHierarchy")
  contacts                                                    Contact[]
  introduction_requests                                       introduction_requests[]

  @@map("companies")
  @@index([city, state])
  @@index([companyType])
  @@index([industry])
  @@index([lastInsightUpdate])
  @@index([name])
  @@index([normalizedName])
  @@index([normalizedWebsite])
  @@index([verified])
}

model Contact {
  id                    String                  @id
  firstName             String
  lastName              String
  fullName              String
  title                 String
  email                 String?                 @unique(map: "unique_contact_email")
  phone                 String?
  linkedinUrl           String?
  logoUrl               String?
  personalEmail         String?
  department            Department?
  seniority             SeniorityLevel
  primaryRole           ContactRole?
  companyId             String
  territories           String?
  accounts              String?
  budgetRange           BudgetRange?
  name                  String?
  isDecisionMaker       Boolean                 @default(false)
  verified              Boolean                 @default(false)
  dataQuality           DataQuality             @default(BASIC)
  lastVerified          DateTime?
  isActive              Boolean                 @default(true)
  preferredContact      ContactMethod?
  communityScore        Float?                  @default(0)
  createdAt             DateTime                @default(now())
  updatedAt             DateTime
  ContactInteraction    ContactInteraction[]
  ContactMention        ContactMention[]
  ContactNote           ContactNote[]
  ContactStatus         ContactStatus?
  EventAttendee         EventAttendee[]
  PostContactMention    PostContactMention[]
  TopicContact          TopicContact[]
  UserConnection        UserConnection[]
  ViewedContact         ViewedContact[]
  company               Company                 @relation(fields: [companyId], references: [id], onDelete: Cascade)
  introduction_requests introduction_requests[]

  @@map("contacts")
  @@unique([firstName, lastName, companyId], map: "unique_contact_per_company")
  @@index([communityScore])
  @@index([companyId])
  @@index([department])
  @@index([email])
  @@index([firstName, lastName, companyId])
  @@index([firstName, lastName])
  @@index([seniority])
  @@index([title])
  @@index([verified])
}

model introduction_requests {
  id                                             String             @id
  requesterId                                    String
  targetContactId                                String
  targetCompanyId                                String
  message                                        String?
  context                                        String?
  status                                         IntroductionStatus @default(PENDING)
  facilitatorId                                  String?
  createdAt                                      DateTime           @default(now())
  updatedAt                                      DateTime
  respondedAt                                    DateTime?
  completedAt                                    DateTime?
  User_introduction_requests_facilitatorIdToUser User?              @relation("introduction_requests_facilitatorIdToUser", fields: [facilitatorId], references: [id])
  User_introduction_requests_requesterIdToUser   User               @relation("introduction_requests_requesterIdToUser", fields: [requesterId], references: [id], onDelete: Cascade)
  company                                        Company            @relation(fields: [targetCompanyId], references: [id], onDelete: Cascade)
  contact                                        Contact            @relation(fields: [targetContactId], references: [id], onDelete: Cascade)

  @@index([createdAt])
  @@index([facilitatorId])
  @@index([requesterId])
  @@index([status])
  @@index([targetCompanyId])
  @@index([targetContactId])
}

enum ActivityType {
  SEARCH
  EVENT_ATTENDED
  EVENT_REGISTERED
  FORUM_POST
  CONNECTION_MADE
  GOAL_ACHIEVED
  MILESTONE_REACHED
  UPGRADE_PROMPT_SHOWN
  UPGRADE_COMPLETED
  ACHIEVEMENT_UNLOCKED
}

enum AdvertisingModel {
  AGENCY_MANAGED    // Works with external agencies
  IN_HOUSE          // Internal marketing team
  HYBRID            // Mix of both
}

enum AgencyServiceType {
  CREATIVE
  MEDIA_PLANNING
  MEDIA_BUYING
  DIGITAL_MARKETING
  SOCIAL_MEDIA
  STRATEGY
  ANALYTICS
  PRODUCTION
  PR_COMMUNICATIONS
  INFLUENCER
  PERFORMANCE_MARKETING
  SEO_SEM
}

enum AgencyType {
  FULL_SERVICE
  MEDIA_SPECIALIST
  CREATIVE_SPECIALIST
  DIGITAL_SPECIALIST
  PROGRAMMATIC_SPECIALIST
  SOCIAL_MEDIA_SPECIALIST
  SEARCH_SPECIALIST
  INFLUENCER_SPECIALIST
  PERFORMANCE_MARKETING
  BRAND_STRATEGY
  MEDIA_PLANNING
  MEDIA_BUYING
  DATA_ANALYTICS
  CONTENT_MARKETING
}

enum AttendanceStatus {
  INTERESTED
  PLANNING_TO_ATTEND
  REGISTERED
  ATTENDING
  ATTENDED
  CANCELLED
}

enum BudgetRange {
  UNDER_10K
  RANGE_10K_25K
  RANGE_25K_50K
  RANGE_50K_100K
  RANGE_100K_250K
  RANGE_250K_500K
  RANGE_500K_1M
  RANGE_1M_5M
  RANGE_5M_25M
  OVER_25M
  CONFIDENTIAL
}

enum CompanyType {
  INDEPENDENT_AGENCY
  HOLDING_COMPANY_AGENCY
  MEDIA_HOLDING_COMPANY
  NATIONAL_ADVERTISER
  LOCAL_ADVERTISER
  ADTECH_VENDOR
  MARTECH_VENDOR
  MEDIA_OWNER
  BROADCASTER
  PUBLISHER
  CONSULTANCY
  PRODUCTION_COMPANY
  ADVERTISER
  AGENCY
  MEDIA_COMPANY
  TECH_VENDOR
  INDUSTRY
  DSP_SSP
  ADTECH
}

enum ConnectionStrength {
  STRONG
  MEDIUM
  WEAK
}

enum ConnectionType {
  COLLEAGUE
  FORMER_COLLEAGUE
  CLIENT
  VENDOR
  EVENT_CONNECTION
  REFERRAL
  SOCIAL_MEDIA
  MUTUAL_CONNECTION
  INDUSTRY_CONTACT
  PROSPECT
}

enum ContactMethod {
  EMAIL
  PHONE
  LINKEDIN
  DIRECT_MESSAGE
  NO_CONTACT
}

enum ContactRole {
  MEDIA_BUYER
  MEDIA_PLANNER
  STRATEGIST
  ANALYST
  CREATIVE
  ACCOUNT_MANAGER
  PROJECT_MANAGER
  BUSINESS_DEVELOPER
  DECISION_MAKER
  INFLUENCER
  GATEKEEPER
  IMPLEMENTER
  ADVISOR
  BUDGET_HOLDER
  PROCUREMENT
}

enum DataQuality {
  BASIC
  VERIFIED
  PREMIUM
  EXPERT_VERIFIED
}

enum DealSize {
  SMALL
  MEDIUM
  LARGE
  ENTERPRISE
}

enum Department {
  MEDIA_PLANNING
  MEDIA_BUYING
  DIGITAL_MARKETING
  PROGRAMMATIC
  SOCIAL_MEDIA
  SEARCH_MARKETING
  STRATEGY_PLANNING
  ANALYTICS_INSIGHTS
  CREATIVE_SERVICES
  ACCOUNT_MANAGEMENT
  BUSINESS_DEVELOPMENT
  OPERATIONS
  TECHNOLOGY
  FINANCE
  LEADERSHIP
  HUMAN_RESOURCES
  SALES
  MARKETING
  PRODUCT
  DATA_SCIENCE
}

enum EmployeeRange {
  STARTUP_1_10
  SMALL_11_50
  MEDIUM_51_200
  LARGE_201_1000
  ENTERPRISE_1001_5000
  MEGA_5000_PLUS
}

enum EventBestFor {
  NEW_BUSINESS
  LEARNING
  NETWORKING
  PRODUCT_DEMOS
  PARTNERSHIPS
  RECRUITING
  BRAND_AWARENESS
  THOUGHT_LEADERSHIP
}

enum EventCategory {
  CONFERENCE
  TRADE_SHOW
  SUMMIT
  WORKSHOP
  NETWORKING
  AWARDS
  WEBINAR
  MASTERCLASS
}

enum EventIndustry {
  DIGITAL_ADVERTISING
  TV_BROADCASTING
  RADIO
  PRINT_MEDIA
  OUT_OF_HOME
  STREAMING
  PODCASTING
  ADTECH
  MARTECH
  PROGRAMMATIC
  SOCIAL_MEDIA
  INFLUENCER
  EMAIL_MARKETING
  MOBILE_ADVERTISING
  VIDEO_ADVERTISING
  DATA_ANALYTICS
}

enum EventStatus {
  DRAFT
  PUBLISHED
  CANCELLED
  COMPLETED
  SUSPENDED
}

enum Industry {
  AUTOMOTIVE
  CPG_FOOD_BEVERAGE
  CPG_PERSONAL_CARE
  CPG_HOUSEHOLD
  FINANCIAL_SERVICES
  HEALTHCARE_PHARMA
  RETAIL_ECOMMERCE
  TECHNOLOGY
  ENTERTAINMENT_MEDIA
  TRAVEL_HOSPITALITY
  TELECOM
  FASHION_BEAUTY
  SPORTS_FITNESS
  EDUCATION
  REAL_ESTATE
  ENERGY
  GOVERNMENT_NONPROFIT
  GAMING
  CRYPTOCURRENCY
  INSURANCE
  B2B_SERVICES
  STARTUPS
  NONPROFIT
  PROFESSIONAL_SERVICES
  LOGISTICS
}

enum InsightType {
  NEWS
  LEADERSHIP_CHANGE
  FUNDING
  ACQUISITION
  PRODUCT_LAUNCH
  MARKET_EXPANSION
  FINANCIAL_RESULTS
  HIRING_SURGE
  MEDIA_SPEND_CHANGE
  COMPETITIVE_INTEL
  PARTNERSHIP
  OFFICE_MOVE
  REGULATORY_CHANGE
  INDUSTRY_TREND
  AI_SUMMARY
}

enum InteractionType {
  EMAIL
  PHONE_CALL
  LINKEDIN_MESSAGE
  LINKEDIN_CONNECTION
  MEETING
  CONFERENCE_CALL
  TEXT_MESSAGE
  IN_PERSON
  SOCIAL_MEDIA
  OTHER
}

enum IntroductionStatus {
  PENDING
  ACCEPTED
  DECLINED
  COMPLETED
  CANCELLED
}

enum LeadStatus {
  NEW
  CONTACTED
  QUALIFIED
  PROPOSAL_SENT
  NEGOTIATING
  CLOSED_WON
  CLOSED_LOST
  NOT_INTERESTED
  NURTURING
  ON_HOLD
}

enum MediaType {
  DIGITAL_DISPLAY
  SEARCH_SEM
  SOCIAL_MEDIA
  VIDEO_STREAMING
  CONNECTED_TV
  TRADITIONAL_TV
  RADIO
  PODCAST
  PRINT_NEWSPAPER
  PRINT_MAGAZINE
  OUT_OF_HOME
  BILLBOARD
  TRANSIT
  CINEMA
  DIRECT_MAIL
  EMAIL_MARKETING
  INFLUENCER
  PROGRAMMATIC
  NATIVE_ADVERTISING
  AFFILIATE
  MOBILE_APP
  AUDIO_STREAMING
  GAMING_ADVERTISING
  VIRTUAL_REALITY
}

enum NetworkingActivityType {
  FORUM_POST_CREATED
  FORUM_COMMENT_POSTED
  COMPANY_MENTIONED
  CONTACT_MENTIONED
  POST_BOOKMARKED
  USER_FOLLOWED
  PROFILE_VIEWED
  COMPANY_PROFILE_VIEWED
  CONTACT_PROFILE_VIEWED
  NETWORKING_EVENT_JOINED
  DISCUSSION_PARTICIPATED
  EXPERTISE_SHARED
  QUESTION_ANSWERED
  OPPORTUNITY_SHARED
  INTRODUCTION_MADE
  CONNECTION_REQUESTED
  MESSAGE_SENT
}

enum NotificationType {
  COMPANY_MENTIONED
  CONTACT_MENTIONED
  FORUM_POST_REPLY
  EVENT_REMINDER
  CONNECTION_REQUEST
  ACHIEVEMENT_UNLOCKED
  SYSTEM_ANNOUNCEMENT
  USER_FOLLOWED
  COMPANY_FOLLOWED
  POST_BOOKMARKED
  POST_FOLLOWED
}

enum PartnershipType {
  AGENCY_CLIENT
  MEDIA_PARTNERSHIP
  STRATEGIC_ALLIANCE
  PREFERRED_VENDOR
  HOLDING_COMPANY_SUBSIDIARY
  SISTER_AGENCY
  JOINT_VENTURE
  SUBCONTRACTOR
}

enum PaymentStatus {
  SUCCEEDED
  PENDING
  FAILED
  CANCELED
  REFUNDED
}

enum PostCategory {
  ACCOUNT_MOVES
  RFPS
  INDUSTRY_NEWS
  QA
  NETWORKING
  DEALS
  EVENTS
}

enum PostStatus {
  PENDING
  APPROVED
  REJECTED
  DRAFT
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum Region {
  NORTHEAST
  SOUTHEAST
  MIDWEST
  SOUTHWEST
  WEST
  NORTHWEST
  NATIONAL
  INTERNATIONAL
  CANADA
  GLOBAL
}

enum RevenueRange {
  UNDER_1M
  RANGE_1M_5M
  RANGE_5M_25M
  RANGE_25M_100M
  RANGE_100M_500M
  RANGE_500M_1B
  OVER_1B
  UNDISCLOSED
}

enum Role {
  FREE
  PRO
  TEAM_ADMIN
  ADMIN
}

enum SeniorityLevel {
  INTERN
  COORDINATOR
  SPECIALIST
  SENIOR_SPECIALIST
  MANAGER
  SENIOR_MANAGER
  DIRECTOR
  SENIOR_DIRECTOR
  VP
  SVP
  EVP
  C_LEVEL
  FOUNDER_OWNER
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  INCOMPLETE
  INCOMPLETE_EXPIRED
  PAST_DUE
  UNPAID
  TRIALING
}

enum SubscriptionTier {
  FREE
  PRO
  TEAM
}

enum UrgencyLevel {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum VoteType {
  UPVOTE
  DOWNVOTE
}

enum WaitlistStatus {
  PENDING
  INVITED
  REGISTERED
  DECLINED
}
